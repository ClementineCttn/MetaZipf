head(prarm)
head(param)
unique(param√•,1)
unique(param,1)
unique(param[,1])
#indics=c("accessibility","entropy","stability","travel-distance")
indics=colnames(mean)
indics_cols_toplot = c(1,2,3,4,5,8,9)
vpar=param[,c(1,3,4,5,6)]
plotlist=list();
xpars=c(1,2,3,5);fixedxpars=c(1.1e-4,4,9,0.006)
for(x in 1:length(xpars)){
for(i in indics_cols_toplot){
plotlist[[i]]=
plotWithBars(
param = vpar,mean=mean,sd=sd,
fixed_par_cols = xpars[-x],
fixed_par_vals = fixedxpars[-x],
fixed_par_thresholds = rep(1e-5,3),
indicator = i,
x_param = xpars[x],
varying_param =  4,
xlab=colnames(vpar)[x],ylab=indics[i]
)+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(colnames(vpar)[xpars[x]])+ylab(indics[i])
}
multiplot(plotlist=plotlist,cols=3)
}
unique(param[,1])
unique(param[,3])
unique(param[,4])
unique(param[,5])
unique(param[,6])
indics=colnames(mean)
indics_cols_toplot = c(1,2,3,4,5,8,9)
vpar=param[,c(1,3,4,5,6)]
plotlist=list();
xpars=c(1,2,3,5);fixedxpars=c(1.1e-4,4,9,0.006)
for(x in 1:length(xpars)){
for(i in indics_cols_toplot){
plotlist[[i]]=
plotWithBars(
param = vpar,mean=mean,sd=sd,
fixed_par_cols = xpars[-x],
fixed_par_vals = fixedxpars[-x],
fixed_par_thresholds = rep(1e-5,3),
indicator = i,
x_param = xpars[x],
varying_param =  4,
xlab=colnames(vpar)[x],ylab=indics[i]
)+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(colnames(vpar)[xpars[x]])+ylab(indics[i])
}
multiplot(plotlist=plotlist,cols=3)
}
indics=colnames(mean)
indics_cols_toplot = c(1,2,3,4,5,8,9)
vpar=param[,c(1,3,4,5,6)]
plotlist=list();
xpars=c(1,2,3,5);fixedxpars=c(1.1e-4,4,9,0.006)
for(x in 1:length(xpars)){
for(i in indics_cols_toplot){
plotlist[[i]]=
plotWithBars(
param = vpar,mean=mean,sd=sd,
fixed_par_cols = xpars[-x],
fixed_par_vals = fixedxpars[-x],
fixed_par_thresholds = rep(1e-5,3),
indicator = i,
x_param = xpars[x],
varying_param =  4,
xlab=colnames(vpar)[x],ylab=indics[i]
)+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(colnames(vpar)[xpars[x]])+ylab(indics[i])
}
multiplot(plotlist=plotlist,cols=3)
}
plotWithBars<-function(param,mean,sd,fixed_par_cols,fixed_par_vals,fixed_par_thresholds,indicator,x_param,varying_param,xlab,ylab){
# get concerned rows
rows=rep(TRUE,nrow(param))
for(k in 1:length(fixed_par_cols)){rows=rows&(abs(param[,fixed_par_cols[k]]-fixed_par_vals[k])<fixed_par_thresholds[k]); }
p=ggplot(data.frame(x=param[rows,x_param],
y=mean[rows,indicator],
group=param[rows,varying_param],
ymin=mean[rows,indicator]-sd[rows,indicator],
ymax=mean[rows,indicator]+sd[rows,indicator]),
aes(x=x,y=y,colour=group))
p+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(xlab)+ylab(ylab)
return(p)
}
#indics=c("accessibility","entropy","stability","travel-distance")
indics=colnames(mean)
indics_cols_toplot = c(1,2,3,4,5,8,9)
vpar=param[,c(1,3,4,5,6)]
plotlist=list();
xpars=c(1,2,3,5);fixedxpars=c(1.1e-4,4,9,0.006)
for(x in 1:length(xpars)){
for(i in indics_cols_toplot){
plotlist[[i]]=
plotWithBars(
param = vpar,mean=mean,sd=sd,
fixed_par_cols = xpars[-x],
fixed_par_vals = fixedxpars[-x],
fixed_par_thresholds = rep(1e-5,3),
indicator = i,
x_param = xpars[x],
varying_param =  4,
xlab=colnames(vpar)[x],ylab=indics[i]
)+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(colnames(vpar)[xpars[x]])+ylab(indics[i])
}
multiplot(plotlist=plotlist,cols=3)
}
head(mean)
x
i
indics=colnames(mean)
indics_cols_toplot = c(1,2,3,4,5,8,9)
vpar=param[,c(1,3,4,5,6)]
plotlist=list();
xpars=c(1,2,3,5);fixedxpars=c(1.1e-4,4,9,0.006)
for(x in 1:length(xpars)){
for(i in 1:length(indics_cols_toplot)){
plotlist[[i]]=
plotWithBars(
param = vpar,mean=mean,sd=sd,
fixed_par_cols = xpars[-x],
fixed_par_vals = fixedxpars[-x],
fixed_par_thresholds = rep(1e-5,3),
indicator = indics_cols_toplot[i],
x_param = xpars[x],
varying_param =  4,
xlab=colnames(vpar)[x],ylab=indics[indics_cols_toplot[i]]
)+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(colnames(vpar)[xpars[x]])+ylab(indics[indics_cols_toplot[i]])
}
multiplot(plotlist=plotlist,cols=3)
}
res <- read.csv('Models/Governance/MetropolSim/MetropolSim3/res_oml/2015_09_03_16_28_04_grid.csv',sep=",",header=TRUE)
params_cols = c(3,4,6,9,11,12,14,18)
indics_cols = c(1,2,5,7,8,10,13,15,16,17)
raw = getSingleParamPoints(
data = res,
params_cols = params_cols,
indics_cols = indics_cols
)
param=matrix(data=unlist(raw$param),ncol=length(params_cols),byrow=TRUE);colnames(param)<-colnames(res)[params_cols]
mean=matrix(data=unlist(raw$mean),ncol=length(indics_cols),byrow=TRUE);colnames(mean)<-colnames(res)[indics_cols]
sd=matrix(data=unlist(raw$sd),ncol=length(indics_cols),byrow=TRUE);colnames(sd)<-colnames(res)[indics_cols]
plotWithBars<-function(param,mean,sd,fixed_par_cols,fixed_par_vals,fixed_par_thresholds,indicator,x_param,varying_param,xlab,ylab){
# get concerned rows
rows=rep(TRUE,nrow(param))
for(k in 1:length(fixed_par_cols)){rows=rows&(abs(param[,fixed_par_cols[k]]-fixed_par_vals[k])<fixed_par_thresholds[k]); }
p=ggplot(data.frame(x=param[rows,x_param],
y=mean[rows,indicator],
group=param[rows,varying_param],
ymin=mean[rows,indicator]-sd[rows,indicator],
ymax=mean[rows,indicator]+sd[rows,indicator]),
aes(x=x,y=y,colour=group))
p+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(xlab)+ylab(ylab)
return(p)
}
indics=colnames(mean)
indics_cols_toplot = c(1,2,3,4,5,8,9)
vpar=param[,c(1,3,4,5,6)]
plotlist=list();
xpars=c(1,2,3,5);fixedxpars=c(1.1e-4,4,9,0.006)
for(x in 1:length(xpars)){
for(i in 1:length(indics_cols_toplot)){
plotlist[[i]]=
plotWithBars(
param = vpar,mean=mean,sd=sd,
fixed_par_cols = xpars[-x],
fixed_par_vals = fixedxpars[-x],
fixed_par_thresholds = rep(1e-5,3),
indicator = indics_cols_toplot[i],
x_param = xpars[x],
varying_param =  4,
xlab=colnames(vpar)[x],ylab=indics[indics_cols_toplot[i]]
)+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(colnames(vpar)[xpars[x]])+ylab(indics[indics_cols_toplot[i]])
}
multiplot(plotlist=plotlist,cols=3)
}
x
i
plotlist
res <- read.csv('Models/Governance/MetropolSim/MetropolSim3/res_oml/2015_09_03_16_28_04_grid.csv',sep=",",header=TRUE)
library(ggplot2)
source(paste0(Sys.getenv("CN_HOME"),'/Models/Utils/R/plots.R'))
res <- read.csv('Models/Governance/MetropolSim/MetropolSim3/res_oml/2015_09_03_16_28_04_grid.csv',sep=",",header=TRUE)
dim(res)
params_cols = c(3,4,6,9,11,12,14,18)
indics_cols = c(1,2,5,7,8,10,13,15,16,17)
raw = getSingleParamPoints(
data = res,
params_cols = params_cols,
indics_cols = indics_cols
)
param=matrix(data=unlist(raw$param),ncol=length(params_cols),byrow=TRUE);colnames(param)<-colnames(res)[params_cols]
mean=matrix(data=unlist(raw$mean),ncol=length(indics_cols),byrow=TRUE);colnames(mean)<-colnames(res)[indics_cols]
sd=matrix(data=unlist(raw$sd),ncol=length(indics_cols),byrow=TRUE);colnames(sd)<-colnames(res)[indics_cols]
dim(param)
dim(mean)
353 * 7
res <- read.csv('Models/Governance/MetropolSim/MetropolSim3/res_oml/2015_09_02_21_08_33_grid.csv',sep=",",header=TRUE)
params_cols = c(3,4,6,9,11,12,14,18)
indics_cols = c(1,2,5,7,8,10,13,15,16,17)
raw = getSingleParamPoints(
data = res,
params_cols = params_cols,
indics_cols = indics_cols
)
param=matrix(data=unlist(raw$param),ncol=length(params_cols),byrow=TRUE);colnames(param)<-colnames(res)[params_cols]
mean=matrix(data=unlist(raw$mean),ncol=length(indics_cols),byrow=TRUE);colnames(mean)<-colnames(res)[indics_cols]
sd=matrix(data=unlist(raw$sd),ncol=length(indics_cols),byrow=TRUE);colnames(sd)<-colnames(res)[indics_cols]
plotWithBars<-function(param,mean,sd,fixed_par_cols,fixed_par_vals,fixed_par_thresholds,indicator,x_param,varying_param,xlab,ylab){
# get concerned rows
rows=rep(TRUE,nrow(param))
for(k in 1:length(fixed_par_cols)){rows=rows&(abs(param[,fixed_par_cols[k]]-fixed_par_vals[k])<fixed_par_thresholds[k]); }
p=ggplot(data.frame(x=param[rows,x_param],
y=mean[rows,indicator],
group=param[rows,varying_param],
ymin=mean[rows,indicator]-sd[rows,indicator],
ymax=mean[rows,indicator]+sd[rows,indicator]),
aes(x=x,y=y,colour=group))
p+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(xlab)+ylab(ylab)
return(p)
}
#indics=c("accessibility","entropy","stability","travel-distance")
indics=colnames(mean)
indics_cols_toplot = c(1,2,3,4,5,8,9)
vpar=param[,c(1,3,4,5,6)]
plotlist=list();
xpars=c(1,2,3,5);fixedxpars=c(1.1e-4,4,9,0.006)
for(x in 1:length(xpars)){
for(i in 1:length(indics_cols_toplot)){
plotlist[[i]]=
plotWithBars(
param = vpar,mean=mean,sd=sd,
fixed_par_cols = xpars[-x],
fixed_par_vals = fixedxpars[-x],
fixed_par_thresholds = rep(1e-5,3),
indicator = indics_cols_toplot[i],
x_param = xpars[x],
varying_param = 4,
xlab=colnames(vpar)[x],ylab=indics[indics_cols_toplot[i]]
)+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(colnames(vpar)[xpars[x]])+ylab(indics[indics_cols_toplot[i]])
}
multiplot(plotlist=plotlist,cols=3)
}
#indics=c("accessibility","entropy","stability","travel-distance")
indics=colnames(mean)
indics_cols_toplot = c(1,2,3,4,5,8,9)
vpar=param[,c(1,3,4,5,6)]
plotlist=list();
xpars=c(1,2,3,5);fixedxpars=c(1.1e-4,4,9,0.006)
for(x in 1:length(xpars)){
for(i in 1:length(indics_cols_toplot)){
plotlist[[i]]=
plotWithBars(
param = vpar,mean=mean,sd=sd,
fixed_par_cols = xpars[-x],
fixed_par_vals = fixedxpars[-x],
fixed_par_thresholds = rep(1e-5,3),
indicator = indics_cols_toplot[i],
x_param = xpars[x],
varying_param = 4,
xlab=colnames(vpar)[x],ylab=indics[indics_cols_toplot[i]]
)+geom_point()+geom_errorbar(aes(x=x,ymin=ymin,ymax=ymax))+xlab(colnames(vpar)[xpars[x]])+ylab(indics[indics_cols_toplot[i]])
}
multiplot(plotlist=plotlist,cols=4)
}
library(RColorBrewer)
library(ggplot2)
library(MASS)
source(paste0(Sys.getenv('CN_HOME'),'/Models/Utils/R/plots.R'))
# data
real_raw = read.csv(
paste0(Sys.getenv("CN_HOME"),'/Results/Morphology/Density/Numeric/20150806_europe50km_10kmoffset_100x100grid.csv'),
sep=";"
)
real =real_raw[!is.na(real_raw[,3])&!is.na(real_raw[,4])&!is.na(real_raw[,5])&!is.na(real_raw[,6])&!is.na(real_raw[,7])&!is.na(real_raw[,8])&!is.na(real_raw[,9]),]
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","log-normal","normal","normal")
ranges=list((1:250)/1000,(1:100)/1000,(600:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(rev(real[[indic]]),"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
summary(real)
summary(real$distance)
hist(real$distance,breaks = 500)
h=hist(real$distance,breaks = 500)
h
help(bar)
help(bars)
plot(rev(h$mids),rev(h$density))
plot(h$mids,rev(h$density))
help(fitdistr)
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
ranges=list((1:250)/1000,(1:100)/1000,(600:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]],"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
ranges=list((1:250)/1000,(1:100)/1000,(600:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
ranges=list((1:250)/1000,(1:1000)/1000,(600:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
ranges=list((1:250)/1000,(1:1000)/1000,(600:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
#hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
hist(
max(real[indic]) - real[[indic]]+1e-4,breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=rev(dnorm(ranges[[k]],mean=fit[1],sd=fit[2]))
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
ranges=list((1:250)/1000,(1:1000)/1000,(1:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
#hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
hist(
max(real[indic]) - real[[indic]]+1e-4,breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
# hists
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
#laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
laws=rep("",4)
ranges=list((1:250)/1000,(1:1000)/1000,(1:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
#hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
par(mfrow=c(2,2))
indics=c("moran","distance","entropy","slope");
#laws=c("log-normal","inv-log-normal","inv-log-normal","normal")
laws=rep("",4)
ranges=list((1:250)/1000,(1:1000)/1000,(1:1000)/1000,(-2500:-500)/1000)
k=1
for(indic in indics){
#hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
hist(real[[indic]],breaks=500,main="",xlab=indic,freq=FALSE)
if(laws[k]=="log-normal"){
fit = coef(fitdistr(abs(real[[indic]]),laws[k]))
dens=dlnorm(ranges[[k]],meanlog=fit[1],sdlog=fit[2])#*sign(fit[1])
}
if(laws[k]=="inv-log-normal"){
# fit on inversed distrib in that case
fit = coef(fitdistr(max(real[indic]) - real[[indic]]+1e-4,"log-normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
if(laws[k]=="normal"){
fit = coef(fitdistr(real[[indic]],"normal"))
dens=dnorm(ranges[[k]],mean=fit[1],sd=fit[2])
}
#points(ranges[[k]],dens,type="l",col="red")
k=k+1
}
###############
#
help(install.packages)
library(test)
help(test)
rcpp_hello_world()
rcpp_hello_world()
help(CMD)
help(INSTALL)
help(.Ca)
help(.Call)
library(seg)
install.packages("seg")
library(seg)
help(seg)
setwd('~/Documents/ComplexSystems/MetaZipf')
list.files()
refs = read.csv('data/zipf_refs.csv')
refs
dim(refs)
meta = read.csv('data/zipf_meta.csv')
meta
head(meta)
head(refs)
write.csv(data.frame(id=1:nrow(refs),refs),'data/refs_id.csv')
help(write.csv)
write.csv(data.frame(id=1:nrow(refs),refs),'data/refs_id.csv',quote=FALSE)
write.csv(data.frame(id=1:nrow(refs),refs),'data/refs_id.csv',quote=FALSE,row.names=FALSE)
