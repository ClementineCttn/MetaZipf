plot(testedHoles)
testedHoles
str(testedHoles)
testedHoles@polygons[[1]]@hole
testedHoles@polygons[[1]]
testedHoles@polygons[[]]
testedHoles@polygons[[1]]@Polygons[[1]]@hole
testedHoles@polygons[[2]]@Polygons[[1]]@hole
testedHoles@polygons[[1]]@Polygons[[2]]@hole
testedHoles@polygons[[1]]@Polygons[[3]]@hole
testedHoles@polygons[[1]]@Polygons[[4]]@hole
testedHoles@polygons[[1]]@Polygons[[5]]@hole
testedHoles@polygons[[3]]@Polygons[[5]]@hole
testedHoles@polygons[[1]]@Polygons[[10]]@hole
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[1]]@hole == TRUE]
plot(tt)
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[1]]@hole == FALSE]
plot(tt)
testedHoles@polygons[[1]]@Polygons[[1]]@hole
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[2]]@hole == FALSE]
plot(tt)
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[3]]@hole == FALSE]
plot(tt)
testedHoles@polygons[[1]]@Polygons
dim(testedHoles@polygons[[1]]@Polygons)
length(testedHoles@polygons[[1]]@Polygons)
(testedHoles@polygons[[1]]@Polygons[[1]])
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[1]]
plot(tt)
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[1]]]
plot(tt)
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[2]]]
plot(tt)
(testedHoles@polygons[[1]]@Polygons[[2]])
tt = testedHoles@polygons[[1]]@Polygons[[2]]
plot(tt)
tt
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[3]]@hole == FALSE]
plot(tt)
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[2]]@hole == FALSE]
plot(tt)
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[1]]@hole == FALSE]
plot(tt)
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[1]]@hole == FALSE]
plot(tt)
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[1]]@hole == FALSE]
plot(tt, col = "red")
(testedHoles@polygons[[1]]@Polygons[[2]])
testedHoles@polygons[[1]]@Polygons[[2]]@hole
testedHoles@polygons[[1]]@Polygons[[3]]@hole
testedHoles@polygons[[1]]@Polygons[[2]]@hole
testedHoles@polygons[[1]]@Polygons[[1]]@hole
testedHoles@polygons[[1]]@Polygons[[19]]@hole
tt = testedHoles[testedHoles@polygons[[1]]@Polygons@hole == TRUE]
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[1:19]]@hole == TRUE]
testedHoles@polygons = lapply(testedHoles@polygons, function(x) { x@Polygons = x@Polygons[1]; x})
plot(data[data$IndID == "MTG_005_A",])
setMethod('dropHole',signature=signature('Polygon'),
def=function(poly) {
#return only Polygons which are not holes
if (poly@hole) NULL else poly
}
)
# Drop holey sp::Polygon entries in the @Polygons list of an sp::Polygons class
setMethod('dropHole', signature = signature('Polygons'),
def = function(poly) {
noHoles <- lapply(poly@Polygons, dropHole)
#Remove the NULL entries from the list
noHoles <- Filter(Negate(is.null), noHoles)
# Turn back into a (single) Polygons
# The generator function (sp::Polygons) fills in the other slots!
# return the new sp:Polygons object
sp::Polygons(noHoles, ID = poly@ID)
}
)
# Drop holey parts of sp::Polygons in the @polygons list
# of an sp::SpatialPolygonsDataFrame
setMethod('dropHole', signature = signature('SpatialPolygonsDataFrame'),
def = function(poly) {
noHoles <- lapply(poly@polygons, dropHole)
# Put the un holey Polygons list back into the @polygons slot
poly@polygons <- noHoles
#return the modified SpatialPolygonsDataFrame
poly
}
)
setMethod('dropHole',signature=signature('Polygon'),
def=function(poly) {
#return only Polygons which are not holes
if (poly@hole) NULL else poly
}
)
setGeneric('dropHole',def=function(poly, ...){
standardGeneric('dropHole')
})
# Drop holey sp::Polygon entries in the @Polygons list of an sp::Polygons class
setMethod('dropHole', signature = signature('Polygons'),
def = function(poly) {
noHoles <- lapply(poly@Polygons, dropHole)
#Remove the NULL entries from the list
noHoles <- Filter(Negate(is.null), noHoles)
# Turn back into a (single) Polygons
# The generator function (sp::Polygons) fills in the other slots!
# return the new sp:Polygons object
sp::Polygons(noHoles, ID = poly@ID)
}
)
# Drop holey parts of sp::Polygons in the @polygons list
# of an sp::SpatialPolygonsDataFrame
setMethod('dropHole', signature = signature('SpatialPolygonsDataFrame'),
def = function(poly) {
noHoles <- lapply(poly@polygons, dropHole)
# Put the un holey Polygons list back into the @polygons slot
poly@polygons <- noHoles
#return the modified SpatialPolygonsDataFrame
poly
}
)
newmap <- dropHole(NSWACTA)
tt = testedHoles[testedHoles@polygons[[1]]@Polygons[[1:19]]@hole == TRUE]
plot(tt, col = "red")
newmap <- dropHole(testedHoles)
# Drop holey parts of sp::Polygons in the @polygons list
# of an sp::SpatialPolygonsDataFrame
setMethod('dropHole', signature = signature('SpatialPolygonsDataFrame'),
def = function(poly) {
noHoles <- lapply(poly@polygons, dropHole)
# Put the un holey Polygons list back into the @polygons slot
poly@polygons <- noHoles
#return the modified SpatialPolygonsDataFrame
poly
}
)
newmap <- dropHole(testedHoles)
str(testedHoles)
testedHoles.df = as.data.frame("ID" = 1075)
testedHoles.df = data.frame("ID" = 1075)
testedHoles.df
testedHoles <- SpatialPolygonsDataFrame(testedHoles, testedHoles.df)
rownames(testedHoles.df)
testedHoles@polygons[[1]]@ID
rownames(testedHoles.df) = testedHoles.df$ID
testedHoles <- SpatialPolygonsDataFrame(testedHoles, testedHoles.df)
newmap <- dropHole(testedHoles)
str(testedHoles)
testingHoles = wpp[!is.na(wpp@data$IDNP),]
testingHoles = testingHoles[testingHoles@data$IDNP == 1075,]
testedHoles = unionSpatialPolygons(testingHoles, testingHoles@data$IDNP)
testedHoles.df = data.frame("ID" = 1075)
rownames(testedHoles.df) = testedHoles.df$ID
withHoles <- SpatialPolygonsDataFrame(testedHoles, testedHoles.df)
str(withHoles)
newmap <- dropHole(withHoles)
# Drop a single sp::Polygon if it is holey
setMethod('dropHole',signature=signature('Polygon'),
def=function(poly) {
#return only Polygons which are not holes
if (poly@hole) NULL else poly
}
)
setGeneric('dropHole',def=function(poly, ...){
standardGeneric('dropHole')
})
# Drop holey sp::Polygon entries in the @Polygons list of an sp::Polygons class
setMethod('dropHole', signature = signature('Polygons'),
def = function(poly) {
noHoles <- lapply(poly@Polygons, dropHole)
#Remove the NULL entries from the list
noHoles <- Filter(Negate(is.null), noHoles)
# Turn back into a (single) Polygons
# The generator function (sp::Polygons) fills in the other slots!
# return the new sp:Polygons object
sp::Polygons(noHoles, ID = poly@ID)
}
)
# Drop holey parts of sp::Polygons in the @polygons list
# of an sp::SpatialPolygonsDataFrame
setMethod('dropHole', signature = signature('SpatialPolygonsDataFrame'),
def = function(poly) {
noHoles <- lapply(poly@polygons, dropHole)
# Put the un holey Polygons list back into the @polygons slot
poly@polygons <- noHoles
#return the modified SpatialPolygonsDataFrame
poly
}
)
newmap <- dropHole(withHoles)
withHoles <- SpatialPolygonsDataFrame(testedHoles, testedHoles.df)
newmap <- dropHole(withHoles)
setMethod('dropHole',signature=signature('Polygon'),
def=function(poly) {
#return only Polygons which are not holes
if (poly@hole) NULL else poly
}
)
setGeneric('dropHole',def=function(poly, ...){
standardGeneric('dropHole')
})
# Drop holey sp::Polygon entries in the @Polygons list of an sp::Polygons class
setMethod('dropHole', signature = signature('Polygons'),
def = function(poly) {
noHoles <- lapply(poly@Polygons, dropHole)
#Remove the NULL entries from the list
noHoles <- Filter(Negate(is.null), noHoles)
# Turn back into a (single) Polygons
# The generator function (sp::Polygons) fills in the other slots!
# return the new sp:Polygons object
setGeneric('dropHole',def=function(poly, ...){
standardGeneric('dropHole')
})
# Drop a single sp::Polygon if it is holey
setMethod('dropHole',signature=signature('Polygon'),
def=function(poly) {
#return only Polygons which are not holes
if (poly@hole) NULL else poly
}
)
# Drop holey sp::Polygon entries in the @Polygons list of an sp::Polygons class
setMethod('dropHole', signature = signature('Polygons'),
def = function(poly) {
noHoles <- lapply(poly@Polygons, dropHole)
#Remove the NULL entries from the list
noHoles <- Filter(Negate(is.null), noHoles)
# Turn back into a (single) Polygons
# The generator function (sp::Polygons) fills in the other slots!
# return the new sp:Polygons object
sp::Polygons(noHoles, ID = poly@ID)
}
)
# Drop holey parts of sp::Polygons in the @polygons list
# of an sp::SpatialPolygonsDataFrame
setMethod('dropHole', signature = signature('SpatialPolygonsDataFrame'),
def = function(poly) {
noHoles <- lapply(poly@polygons, dropHole)
# Put the un holey Polygons list back into the @polygons slot
poly@polygons <- noHoles
#return the modified SpatialPolygonsDataFrame
poly
}
)
newmap <- dropHole(withHoles)
}
})
setGeneric('dropHole',def=function(poly, ...){
standardGeneric('dropHole')
})
setMethod('dropHole',signature=signature('Polygon'),
def=function(poly) {
#return only Polygons which are not holes
if (poly@hole) NULL else poly
}
)
# Drop holey sp::Polygon entries in the @Polygons list of an sp::Polygons class
setMethod('dropHole', signature = signature('Polygons'),
def = function(poly) {
noHoles <- lapply(poly@Polygons, dropHole)
#Remove the NULL entries from the list
noHoles <- Filter(Negate(is.null), noHoles)
# Turn back into a (single) Polygons
# The generator function (sp::Polygons) fills in the other slots!
# return the new sp:Polygons object
sp::Polygons(noHoles, ID = poly@ID)
}
)
# Drop holey parts of sp::Polygons in the @polygons list
# of an sp::SpatialPolygonsDataFrame
setMethod('dropHole', signature = signature('SpatialPolygonsDataFrame'),
def = function(poly) {
noHoles <- lapply(poly@polygons, dropHole)
# Put the un holey Polygons list back into the @polygons slot
poly@polygons <- noHoles
#return the modified SpatialPolygonsDataFrame
poly
}
)
newmap <- dropHole(withHoles)
plot(newmap)
noHoles <- dropHole(withHoles)
str(noHoles)
rownames(wpp@data) = wpp@data$WZ11CD
testingHoles = wpp[!is.na(wpp@data$IDNP),]
#testingHoles = testingHoles[testingHoles@data$IDNP == 1075,]
testedHoles = unionSpatialPolygons(testingHoles, testingHoles@data$IDNP)
plot(testedHoles)
testedHoles@polygons
length(testedHoles@polygons)
length( testingHoles@data$IDNP)
length( unique(testingHoles@data$IDNP))
testedHoles.df = data.frame("ID" = unique(testingHoles@data$IDNP))
rownames(testedHoles.df) = testedHoles.df$ID
withHoles <- SpatialPolygonsDataFrame(testedHoles, testedHoles.df)
noHoles <- dropHole(withHoles)
plot(noHoles)
writeOGR(noHoles, "/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clusters_NoHoles.shp", layer = "clusters_NoHoles", driver="ESRI Shapefile")
wpp = poly.data
#wpp = poly.data[poly.data@data$row %in% 45000:48000,]
wpp@data$DNP = (wpp@data$WP607EW0008 + wpp@data$WP607EW0010 +
wpp@data$WP607EW0014 + wpp@data$WP607EW0016) / wpp@data$WP102EW0002
summary(wpp@data$DNP)
cutoff = 2
#wpp@data$row = as.numeric(rownames(wpp@data))
wpp@data$IDNP = ifelse(wpp@data$DNP >= cutoff, 0, NA)
summary(wpp@data$IDNP)
aboveCutoffRows = wpp@data[!is.na(wpp@data$IDNP),"row"]
aboveCutoff = wpp[wpp@data$row %in% aboveCutoffRows,]
head(aboveCutoff)
#plot(aboveCutoff, col="blue", border=F)
id = 0
#r = aboveCutoffRows[100]
#wpp@data[r,]
zonesWithID = c()
for (r in aboveCutoffRows){
print(r)
if (wpp@data[wpp@data$row == r,"IDNP"] == 0) {
id = id + 1
wpp@data[wpp@data$row == r,"IDNP"] = id
#   print("me id-ied")
zonesWithID = unique(c(zonesWithID, r))
myNbRows = nb[r+1][[1]] -1# list neighbours of polygon r (+1 because counting starts from 0 in nb file)
myNbRowsAboveCutoff = myNbRows[myNbRows %in% aboveCutoffRows == TRUE]
theirNeighboursWithoutIDAboveCutoff = myNbRowsAboveCutoff[myNbRowsAboveCutoff %in% zonesWithID == FALSE]
if (length(theirNeighboursWithoutIDAboveCutoff) == 0) theirNeighboursWithoutIDAboveCutoff = NULL
while(!is.null(theirNeighboursWithoutIDAboveCutoff)){
#   print("neighbourhgs id-ied")
wpp@data[wpp@data$row %in% theirNeighboursWithoutIDAboveCutoff ,"IDNP"] = id
zonesWithID = unique(c(zonesWithID, theirNeighboursWithoutIDAboveCutoff))
listNeighbourgs = theirNeighboursWithoutIDAboveCutoff
theirNeighbours = unique(unlist(nb[listNeighbourgs + 1]) - 1) #(+1 because counting starts from 0 in nb file)
theirNeighboursAboveCutoff = theirNeighbours[theirNeighbours %in% aboveCutoffRows == TRUE]
theirNeighboursWithoutIDAboveCutoff = theirNeighboursAboveCutoff[theirNeighboursAboveCutoff %in% zonesWithID == FALSE]
if (length(theirNeighboursWithoutIDAboveCutoff) == 0) theirNeighboursWithoutIDAboveCutoff = NULL
}
}
}
########## Integrating holes now...
#
# underCutoffRows = wpp@data[is.na(wpp@data$IDNP),"row"]
# underCutoff = wpp[wpp@data$row %in% underCutoffRows,]
#
# for (h in underCutoffRows){
#   print(h)
#   myNbRows = nb[h+1][[1]] -1# list neighbours of polygon r (+1 because counting starts from 0 in nb file)
#   myIds = wpp@data[wpp@data$row %in% myNbRows,"IDNP"]
#   if(NA %in% myIds) {} else {
#    if (isTRUE(all.equal(myIds, rep(myIds[1], length(myIds)))) ) {
#      wpp@data[wpp@data$row == h,"IDNP"] = myIds[1]
#    }
#   }
# }
#writeOGR(wpp,"/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clustersTEST.shp", layer = "clustersTEST", driver="ESRI Shapefile")
rownames(wpp@data) = wpp@data$WZ11CD
testingHoles = wpp[!is.na(wpp@data$IDNP),]
#testingHoles = testingHoles[testingHoles@data$IDNP == 1075,]
testedHoles = unionSpatialPolygons(testingHoles, testingHoles@data$IDNP)
testedHoles.df = data.frame("ID" = unique(testingHoles@data$IDNP))
rownames(testedHoles.df) = testedHoles.df$ID
withHoles <- SpatialPolygonsDataFrame(testedHoles, testedHoles.df)
noHoles <- dropHole(withHoles)
plot(noHoles)
str(noHoles)
writeOGR(noHoles, "/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clusters_NoHoles2.shp", layer = "clusters_NoHoles2", driver="ESRI Shapefile")
t1 = gBuffer(noHoles, byid=FALSE, id=NULL, width=1.0, quadsegs=5, capStyle="ROUND",
joinStyle="ROUND", mitreLimit=1.0)
plot(t1)
writeOGR(t1, "/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clusters_NoHolesBuf.shp", layer = "clusters_NoHolesBuf", driver="ESRI Shapefile")
str(t1)
t1@polygons
t1@polygons[[1]]
t1@polygons[[1]]@ID
t1@polygons[[2]]@ID
length(t1)
plot(t1, border=F)
plot(t1, border=F, col="red")
t1 = gBuffer(noHoles, byid=TRUE, width=1.0, quadsegs=5, capStyle="ROUND",
joinStyle="ROUND", mitreLimit=1.0)
testedHoles.df = data.frame("ID" = unique(testingHoles@data$IDNP))
rownames(testedHoles.df) = testedHoles.df$ID
withHoles <- SpatialPolygonsDataFrame(testedHoles, testedHoles.df)
writeOGR(t1, "/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clusters_NoHolesBuf.shp", layer = "clusters_NoHolesBuf", driver="ESRI Shapefile")
t1 = gBuffer(noHoles, byid=TRUE, width=100.0, quadsegs=5, capStyle="ROUND",
joinStyle="ROUND", mitreLimit=1.0)
# testedHoles.df = data.frame("ID" = unique(testingHoles@data$IDNP))
# rownames(testedHoles.df) = testedHoles.df$ID
# withHoles <- SpatialPolygonsDataFrame(testedHoles, testedHoles.df)
#
# t1@polygons[[2]]@ID
# REG@polygons[[i]]@ID)
# plot(t1, border=F, col="red")
#
# pc100km <- gBuffer( pc, width=100*distm, byid=TRUE )
# # Add data, and write to shapefile
# pc100km <- SpatialPolygonsDataFrame( pc100km, data=pc100km@data )
# writeOGR( pc100km, "pc100km", "pc100km", driver="ESRI Shapefile" )
writeOGR(t1, "/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clusters_NoHolesBuf2.shp",
layer = "clusters_NoHolesBuf2", driver="ESRI Shapefile")
t2 = unionSpatialPolygons(t1)
length(t1)
t2 = unionSpatialPolygons(t1, IDs = 1:length(t1))
writeOGR(t2, "/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clusters_NoHolesBuf3.shp",
layer = "clusters_NoHolesBuf3", driver="ESRI Shapefile")
length(t2)
t3 <- SpatialPolygonsDataFrame(t2, data.frame("ID" = 1:length(t2)))
writeOGR(t3, "/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clusters_NoHolesBuf3.shp",
layer = "clusters_NoHolesBuf3", driver="ESRI Shapefile")
over(t3)
t2 = unionSpatialPolygons(t1, IDs = 1:length(t1))
plot(t2)
plot(t2, col = red, border=F)
plot(t2, col = "red", border=F)
t1 = gBuffer(noHoles, width=100.0, capStyle="ROUND",
joinStyle="ROUND")
t2 = disaggregate(t1)
writeOGR(t2, "/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clusters_NoHolesBuf4.shp",
layer = "clusters_NoHolesBuf4", driver="ESRI Shapefile")
t2 = SpatialPolygonsDataFrame(t2, data.frame("ID" = 1:length(t2)))
writeOGR(t2, "/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clusters_NoHolesBuf4.shp",
layer = "clusters_NoHolesBuf4", driver="ESRI Shapefile")
t2b = dropHole(t2)
writeOGR(t2b, "/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clusters_NoHolesBuf4.shp",
layer = "clusters_NoHolesBuf4", driver="ESRI Shapefile")
t1 = gBuffer(noHoles, width=1000.0, capStyle="ROUND",
joinStyle="ROUND")
t2 = disaggregate(t1)
t2 = SpatialPolygonsDataFrame(t2, data.frame("ID" = 1:length(t2)))
t2b = dropHole(t2)
writeOGR(t2b, "/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clusters_NoHolesBuf5.shp",
layer = "clusters_NoHolesBuf5", driver="ESRI Shapefile")
t1 = gBuffer(noHoles, width=200.0, capStyle="ROUND",
joinStyle="ROUND")
t2 = disaggregate(t1)
t2 = SpatialPolygonsDataFrame(t2, data.frame("ID" = 1:length(t2)))
t2b = dropHole(t2)
writeOGR(t2b, "/Users/clementinecottineau/Documents/clementine/UKRDRF/GIS/clusters_NoHolesBuf6.shp",
layer = "clusters_NoHolesBuf6", driver="ESRI Shapefile")
plot(t2b)
plot(t2b, borders=F, col="red")
plot(t2b, border=F, col="red")
plot(wpp)
pi <- intersect(t2b, wpp)
shiny::runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
runApp('Documents/MetaZipf')
refs = read.csv("data/zipf_refs.csv", sep=",", dec=".")
setwd("~/Documents/MetaZipf")
meta = read.csv("data/zipf_meta.csv", sep=",", dec=".")
meta$TOTAL_POP = as.numeric(meta$TOTAL_POP)
meta[meta$ECO == 1 & meta$SOC == 0 & meta$PHYS == 0, "DISCIPLINE"] = "ECO"
meta[meta$ECO == 1 & meta$SOC == 1 & meta$PHYS == 0, "DISCIPLINE"] = "ECO & SOC"
meta[meta$ECO == 1 & meta$SOC == 0 & meta$PHYS == 1, "DISCIPLINE"] = "ECO & PHYS"
meta[meta$ECO == 1 & meta$SOC == 1 & meta$PHYS == 1, "DISCIPLINE"] = "ECO, SOC & PHYS"
meta[meta$ECO == 0 & meta$SOC == 1 & meta$PHYS == 0, "DISCIPLINE"] = "SOC"
meta[meta$ECO == 0 & meta$SOC == 1 & meta$PHYS == 1, "DISCIPLINE"] = "SOC & PHYS"
meta[meta$ECO == 0 & meta$SOC == 0 & meta$PHYS == 1, "DISCIPLINE"] = "PHYS"
refs = read.csv("data/zipf_refs.csv", sep=",", dec=".")
head(refs)
head(meta)
meta = read.csv("data/zipf_meta.csv", sep=",", dec=".")
meta2 = data.frame(meta, refs[match(meta$REFID,refs$REFID),])
head(meta2)
meta[,c("REFID.1", "REGRESSIONFORM", "AUTHOR", "YEAR", "PAGE", "SOURCE")] = NULL
meta0[,c("REFID.1", "REGRESSIONFORM", "AUTHOR", "YEAR", "PAGE", "SOURCE")] = NULL
meta2[,c("REFID.1", "REGRESSIONFORM", "AUTHOR", "YEAR", "PAGE", "SOURCE")] = NULL
rownames(meta2) = 1:dim(meta2)[2]
dim(meta2)[2]
rownames(meta2) = 1:dim(meta2)[1]
meta2[,c("REFID.1", "REGRESSIONFORM", "AUTHOR", "YEAR", "PAGE", "SOURCE")] = NULL
meta2$REFID.1 = NULL
meta = read.csv("data/zipf_meta.csv", sep=",", dec=".")
meta$TOTAL_POP = as.numeric(meta$TOTAL_POP)
refs = read.csv("data/zipf_refs.csv", sep=",", dec=".")
head(meta)
metaToAdd = data.frame()
refsToAdd = data.frame()
meta = data.frame(meta, refs[match(meta$REFID,refs$REFID),])
rownames(meta) = 1:dim(meta)[1]
meta$REFID.1 = NULL
meta$REGRESSIONFORM = NULL
meta$AUTHOR = NULL
meta$YEAR = NULL
meta$PAGE = NULL
meta$SOURCE = NULL
meta[meta$ECO == 1 & meta$SOC == 0 & meta$PHYS == 0, "DISCIPLINE"] = "ECO"
meta[meta$ECO == 1 & meta$SOC == 1 & meta$PHYS == 0, "DISCIPLINE"] = "ECO & SOC"
meta[meta$ECO == 1 & meta$SOC == 0 & meta$PHYS == 1, "DISCIPLINE"] = "ECO & PHYS"
meta[meta$ECO == 1 & meta$SOC == 1 & meta$PHYS == 1, "DISCIPLINE"] = "ECO, SOC & PHYS"
meta[meta$ECO == 0 & meta$SOC == 1 & meta$PHYS == 0, "DISCIPLINE"] = "SOC"
meta[meta$ECO == 0 & meta$SOC == 1 & meta$PHYS == 1, "DISCIPLINE"] = "SOC & PHYS"
meta[meta$ECO == 0 & meta$SOC == 0 & meta$PHYS == 1, "DISCIPLINE"] = "PHYS"
runApp()
runApp()
runApp()
