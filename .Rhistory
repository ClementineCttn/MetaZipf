for (j in 1:sideMatrix){
incomeGrid[i,j] = incomeGroupAllocation[[j]]
}}
################ Compute segregation index
grd <- GridTopology(cellcentre.offset=c(0.5,0.5),
cellsize=c(1,1), cells.dim=c(sideMatrix,sideMatrix))
grd.sp <- as.SpatialPolygons.GridTopology(grd)
incomeFrame = melt(incomeGrid)
colnames(incomeFrame) = c("x", "y", "incomeGroup")
for (i in 1:nGroups){
incomeFrame[,3+i] = ifelse(incomeFrame$incomeGroup == i, 1, 0)
colnames(incomeFrame)[3+i] = paste("Group", i, sep="_")
}
cols = seq (4,3+nGroups, 1)
segRes = spseg(x = grd.sp, data = incomeFrame[,cols], smoothing = Smoothing)
print(segRes, digits = 3)
print(gini, digits = 3)
spplot(segRes)#, main = "No spatial smoothing")
segI = c(segRes@d, segRes@r, segRes@h)
################ Visualise spatial distribution
#vizGrid(incomeGrid, breaks, round(segI[[segregationI]],2), slopeIncome = slopeIncome)
segRes
spplot(segRes)#, main = "No spatial smoothing")
library(lattice)
library(RColorBrewer)
library(seg)
library(reshape2)
library(dplyr)
library(data.table)
spplot(segRes)#, main = "No spatial smoothing")
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
nestim = 3
form = function(nestim) {
chain = 'wellPanel(column(6,numericInput(paste("alphaestim", nestim) , paste("Alpha", nestim) , value = "1")),
column(6,numericInput("dateestim", "Date of estimation", value = "2000")),
column(6,textInput("urbandefestim", "Urban Definition", value = "Ex: SMA, Boroughs, UN agglomerations...")),
column(6,numericInput("truncestim", "Minimum Population of Cities", value = "10000")),
column(4,numericInput("nCitiesestim", "Number of cities", value = "100")),
column(4,textInput("territoryestim", "Territory", value = "Ex: France")),
column(4,numericInput("r2estim", "R2", value = "100"))
)'
return(chain)
}
#  }
FinalChain = form(1)
pasteInputs = function(chainInputs){
chain = paste(chainInputs,'wellPanel(column(6,numericInput(paste("alphaestim", i) , paste("Alpha", i) , value = "1")),
column(6,numericInput("dateestim", "Date of estimation", value = "2000")),
column(6,textInput("urbandefestim", "Urban Definition", value = "Ex: SMA, Boroughs, UN agglomerations...")),
column(6,numericInput("truncestim", "Minimum Population of Cities", value = "10000")),
column(4,numericInput("nCitiesestim", "Number of cities", value = "100")),
column(4,textInput("territoryestim", "Territory", value = "Ex: France")),
column(4,numericInput("r2estim", "R2", value = "100"))', sep=",")
return(chain)
}
if (nestim > 1){
repetitions = nestim - 1
FinalChain = do.call(`paste0`,as.data.frame(replicate(repetitions, pasteInputs(chainInputs = FinalChain))))
}
# for (i in 1:nestim){
#   textInput(paste("estim", i, sep="_"), paste("Estimate N.", i, sep=" "), value="Bingo ?")
# }
FinalChain
str(FinalChain)
shiny::runApp('Documents/MetaZipf')
final = parse(text = FinalChain)
FinalChain
shiny::runApp('Documents/MetaZipf')
form = function(nestim) {
chain = paste('wellPanel(column(6,numericInput(paste("alphaestim",', nestim,') , paste("Alpha",', nestim, ') , value = "1")),
column(6,numericInput("dateestim", "Date of estimation", value = "2000")),
column(6,textInput("urbandefestim", "Urban Definition", value = "Ex: SMA, Boroughs, UN agglomerations...")),
column(6,numericInput("truncestim", "Minimum Population of Cities", value = "10000")),
column(4,numericInput("nCitiesestim", "Number of cities", value = "100")),
column(4,textInput("territoryestim", "Territory", value = "Ex: France")),
column(4,numericInput("r2estim", "R2", value = "100"))
)', sep ="")
return(chain)
}
#  }
FinalChain = form(1)
pasteInputs = function(chainInputs){
chain = paste(chainInputs, ',', 'wellPanel(column(6,numericInput(paste("alphaestim",', nestim,') , paste("Alpha",', nestim, ') , value = "1")),
column(6,numericInput("dateestim", "Date of estimation", value = "2000")),
column(6,textInput("urbandefestim", "Urban Definition", value = "Ex: SMA, Boroughs, UN agglomerations...")),
column(6,numericInput("truncestim", "Minimum Population of Cities", value = "10000")),
column(4,numericInput("nCitiesestim", "Number of cities", value = "100")),
column(4,textInput("territoryestim", "Territory", value = "Ex: France")),
column(4,numericInput("r2estim", "R2", value = "100"))
)', sep="")
return(chain)
}
if (nestim > 1){
repetitions = nestim - 1
FinalChain = do.call(`paste0`,as.data.frame(replicate(repetitions, pasteInputs(chainInputs = FinalChain))))
}
# for (i in 1:nestim){
#   textInput(paste("estim", i, sep="_"), paste("Estimate N.", i, sep=" "), value="Bingo ?")
# }
final = parse(text = FinalChain)
FinalChain
final = parse(text = FinalChain)
str(FinalChain)
FinalChain[1]
FinalChain[2]
nestim = 2
form = function(nestim) {
chain = paste('wellPanel(column(6,numericInput(paste("alphaestim",', nestim,') , paste("Alpha",', nestim, ') , value = "1")),
column(6,numericInput("dateestim", "Date of estimation", value = "2000")),
column(6,textInput("urbandefestim", "Urban Definition", value = "Ex: SMA, Boroughs, UN agglomerations...")),
column(6,numericInput("truncestim", "Minimum Population of Cities", value = "10000")),
column(4,numericInput("nCitiesestim", "Number of cities", value = "100")),
column(4,textInput("territoryestim", "Territory", value = "Ex: France")),
column(4,numericInput("r2estim", "R2", value = "100"))
)', sep ="")
return(chain)
}
#  }
FinalChain = form(1)
pasteInputs = function(chainInputs){
chain = paste(chainInputs, ',', 'wellPanel(column(6,numericInput(paste("alphaestim",', nestim,') , paste("Alpha",', nestim, ') , value = "1")),
column(6,numericInput("dateestim", "Date of estimation", value = "2000")),
column(6,textInput("urbandefestim", "Urban Definition", value = "Ex: SMA, Boroughs, UN agglomerations...")),
column(6,numericInput("truncestim", "Minimum Population of Cities", value = "10000")),
column(4,numericInput("nCitiesestim", "Number of cities", value = "100")),
column(4,textInput("territoryestim", "Territory", value = "Ex: France")),
column(4,numericInput("r2estim", "R2", value = "100"))
)', sep="")
return(chain)
}
if (nestim > 1){
repetitions = nestim - 1
FinalChain = do.call(`paste0`,as.data.frame(replicate(repetitions, pasteInputs(chainInputs = FinalChain))))
}
# for (i in 1:nestim){
#   textInput(paste("estim", i, sep="_"), paste("Estimate N.", i, sep=" "), value="Bingo ?")
# }
final = parse(text = FinalChain)
FinalChain
str(FinalChain)
nestim = 6
if (nestim > 1){
repetitions = nestim - 1
FinalChain = do.call(`paste0`,as.data.frame(replicate(repetitions, pasteInputs(chainInputs = FinalChain))))
}
final = parse(text = FinalChain)
str(FinalChain)
nestim = 6
form = function(nestim) {
chain = paste('wellPanel(column(6,numericInput(paste("alphaestim",', nestim,') , paste("Alpha",', nestim, ') , value = "1")),
column(6,numericInput("dateestim", "Date of estimation", value = "2000")),
column(6,textInput("urbandefestim", "Urban Definition", value = "Ex: SMA, Boroughs, UN agglomerations...")),
column(6,numericInput("truncestim", "Minimum Population of Cities", value = "10000")),
column(4,numericInput("nCitiesestim", "Number of cities", value = "100")),
column(4,textInput("territoryestim", "Territory", value = "Ex: France")),
column(4,numericInput("r2estim", "R2", value = "100"))
)', sep ="")
return(chain)
}
#  }
#FinalChain = form(1)
pasteInputs = function(chainInputs){
chain = paste(chainInputs, ',', 'wellPanel(column(6,numericInput(paste("alphaestim",', nestim,') , paste("Alpha",', nestim, ') , value = "1")),
column(6,numericInput("dateestim", "Date of estimation", value = "2000")),
column(6,textInput("urbandefestim", "Urban Definition", value = "Ex: SMA, Boroughs, UN agglomerations...")),
column(6,numericInput("truncestim", "Minimum Population of Cities", value = "10000")),
column(4,numericInput("nCitiesestim", "Number of cities", value = "100")),
column(4,textInput("territoryestim", "Territory", value = "Ex: France")),
column(4,numericInput("r2estim", "R2", value = "100"))
)', sep="")
return(chain)
}
FinalChain = ""
if (nestim >= 1){
FinalChain = do.call(`paste0`,as.data.frame(replicate(nestim, pasteInputs(chainInputs = FinalChain))))
}
# for (i in 1:nestim){
#   textInput(paste("estim", i, sep="_"), paste("Estimate N.", i, sep=" "), value="Bingo ?")
# }
final = parse(text = FinalChain)
str(FinalChain)
FinalChain = "'go'"
if (nestim >= 1){
FinalChain = do.call(`paste0`,as.data.frame(replicate(nestim, pasteInputs(chainInputs = FinalChain))))
}
# for (i in 1:nestim){
#   textInput(paste("estim", i, sep="_"), paste("Estimate N.", i, sep=" "), value="Bingo ?")
# }
final = parse(text = FinalChain)
FinalChain = "wellPanel('go')"
if (nestim >= 1){
FinalChain = do.call(`paste0`,as.data.frame(replicate(nestim, pasteInputs(chainInputs = FinalChain))))
}
# for (i in 1:nestim){
#   textInput(paste("estim", i, sep="_"), paste("Estimate N.", i, sep=" "), value="Bingo ?")
# }
final = parse(text = FinalChain)
FinalChain
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
makePanel = function(x){fluidRow(column(6,numericInput(paste("alphaestim", x) , paste("Alpha",x) , value = "1"))
#                                          ,
#             column(6,numericInput("dateestim", "Date of estimation", value = "2000")),
#             column(6,textInput("urbandefestim", "Urban Definition", value = "Ex: SMA, Boroughs, UN agglomerations...")),
#             column(6,numericInput("truncestim", "Minimum Population of Cities", value = "10000")),
#             column(4,numericInput("nCitiesestim", "Number of cities", value = "100")),
#             column(4,textInput("territoryestim", "Territory", value = "Ex: France")),
#             column(4,numericInput("r2estim", "R2", value = "100"))
)
}
makePanel(2)
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
pastePanels = function(panel, i) {
newPanel = paste(panel, makePanel(i), sep=",")
return(newPanel)
}
panel = makePanel(1)
panel
newPanel = (panel, 2)
newPanel = pastePanels(panel, 2)
newPanel
parse(newPanel)
pastePanels = function(panel, i) {
newPanel = paste(panel, makePanel(i), sep="\n")
return(newPanel)
}
panel = makePanel(1)
newPanel = pastePanels(panel, 2)
parse(newPanel)
p = parse(newPanel)
newPanel
parse(newPanel)
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
install.packages("shiny")
shiny::runApp('Documents/MetaZipf')
install.packages(c("abind", "ade4", "animation", "boot", "chron", "class", "classInt", "cluster", "coda", "codetools", "colorspace", "deldir", "DEoptimR", "devtools", "digest", "doBy", "e1071", "ergm", "ergm.count", "evaluate", "foreign", "formatR", "gdata", "ggplot2", "goftest", "gplots", "gridExtra", "gtools", "hexbin", "highr", "Hmisc", "httr", "igraph", "KernSmooth", "knitr", "latentnet", "lattice", "lme4", "manipulate", "mapproj", "maps", "maptools", "markdown", "MASS", "Matrix", "memoise", "mgcv", "mvtnorm", "network", "networkDynamic", "nlme", "nnet", "plotrix", "plyr", "polyclip", "poweRlaw", "quantreg", "R6", "raster", "rasterVis", "Rcpp", "RCurl", "rgl", "Rglpk", "rmarkdown", "robustbase", "roxygen2", "rpart", "rstudioapi", "scales", "SparseM", "spatial", "splancs", "statnet", "statnet.common", "stringi", "stringr", "survival", "tergm", "trust", "VennDiagram", "VGAM", "xtable", "zoo"))
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
install.packages("manipulate")
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
install.packages("installr")
install.packages("sp")
install.packages("ggplot2")
tags$head(
)
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("rgeos")
install.packages("rgdal")
install.packages("tm")
library(wordcloud)
library(tm)
library(rgeos)
library(rgdal)
path = "/Users/clementinecottineau/Documents/cybergeo20/R_Country_Wordcloud/"
REG = readOGR(dsn=paste(path, "FRA_adm/FRA_adm1.shp", sep=""),
layer = "FRA_adm1", encoding="utf8")
install.packages("rgdal")
library(rgdal)
install.packages("rgdal")
library(rgdal)
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
install.packages("rgdal")
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
install.packages("rgdal")
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
install.packages("rgdal")
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
install.packages("rgdal")
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
install.packages("rgdal")
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
install.packages("rgdal")
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
setRepositories(addURLs =
c(CRANxtras = "http://www.stats.ox.ac.uk/pub/RWin"))
install.packages("/Applications/R/rgdal_1.0-7.tgz", repos = NULL)
library(rgdal)
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:rgdal", unload=TRUE)
library("rgdal", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("rgdal")
install.packages(‘rgdal’,repos=”http://www.stats.ox.ac.uk/pub/RWin“)
install.packages("rgdal", repos="http://www.stats.ox.ac.uk/pub/RWin")
remove.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgdal")
shiny::runApp('Documents/MetaZipf')
r=3
generateEstimFile <- function(i){
a = get(paste("input$alphaestim", i, sep="_"))
w = get(paste("input$territoryestim", i, sep="_"))
u = get(paste("input$urbandefestim", i, sep="_"))
t = get(paste("input$truncestim", i, sep="_"))
d = get(paste("input$dateestim", i, sep="_"))
n = get(paste("input$nCitiesestim", i, sep="_"))
r = get(paste("input$r2estim", i, sep="_"))
row = c(a, w, u, t, d, n, r)
return(row)
}
1
estimToAdd <- lapply(1:r,FUN = generateEstimFile)
estimToAdd
input_alphaestim = 8
input_territoryestim = "aba"
input_alphaestim_1 = 8
input_territoryestim_1 = "aba"
input_alphaestim_2 = 12
input_territoryestim_2 = "ddd"
generateEstimFile <- function(i){
a = get(paste("input_alphaestim", i, sep="_"))
w = get(paste("input_territoryestim", i, sep="_"))
#   u = get(paste("input_urbandefestim", i, sep="_"))
#   t = get(paste("input_truncestim", i, sep="_"))
#   d = get(paste("input_dateestim", i, sep="_"))
#   n = get(paste("input_nCitiesestim", i, sep="_"))
#   r = get(paste("input_r2estim", i, sep="_"))
#   row = c(a, w, u, t, d, n, r)
row = c(a, w)
return(row)
}
r=2
estimToAdd <- lapply(1:r,FUN = generateEstimFile)
estimToAdd
metaToAdd = rbind(estimToAdd)
colnames(metaToAdd) = c("alpha", "where", "what", "truncation", "when", "n", "r2")
metaToAdd = rbind(estimToAdd)
metaToAdd
estimToAdd
metaToAdd = as.data.frame(estimToAdd)
metaToAdd
metaToAdd = t(as.data.frame(estimToAdd))
metaToAdd
write.csv(metaToAdd, paste("data/ToAdd/metaToAdd_session", s, ".csv", sep=""))
s = as.character(Sys.time())
write.csv(metaToAdd, paste("data/ToAdd/metaToAdd_session", s, ".csv", sep=""))
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
generateEstimFile <- function(i){
paste0('list(input[[alphaestim_',i,']],input[[territoryestim_',i,']],
input[[urbandefestim_',i,']],input[[truncestim_',i,']],
input[[dateestim_',i,']], input[[nCitiesestim_',i,']],
input[[r2estim_',i,']])')
}
generateEstimFile(2)
generateEstimFile <- function(i){
paste0('list(input[[alphaestim_',i,']],input[[territoryestim_',i,']],input[[urbandefestim_',i,']],input[[truncestim_',i,']],input[[r2estim_',i,']])')
}
generateEstimFile(2)
k_1 = 2
k_2=4
j_2 = "aa"
j_1 = "oo"
k1 = 2
k2=4
j2 = "aa"
j1 = "oo"
ttt = function(i){paste0("list(k",i, ",j", i,")")}
tt <- lapply(1:2,FUN = ttt)
tt
t = get(tt)
t = get(tt[[1]])
ttt = function(i){paste0("k",i, ",j", i)}
tt <- lapply(1:2,FUN = ttt)
tt
t = list(get(tt[[1]]))
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
paste0("alphaestim_",1)
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
colorRampPalette(c("aquamarine3", "seashell", "indianred2"))
colorRampPalette(c("aquamarine3", "seashell", "indianred2"))(n = 299)
shiny::runApp('Documents/MetaZipf')
shiny::runApp('Documents/MetaZipf')
library(shiny apps)
library(shiny apps)
library(shinyapps)
install.package("shinyapps")
install.packages("shinyapps")
runGitHub( "MetaZipf", "@ClementineCttn")
runGitHub( "MetaZipf", "ClementineCttn")
library(shinyapps)
library("shinyapps")
library(shinyapps)
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
library(shinyapps)
deployApp(account = "clementinegeo")
setwd("~/MetaZipf/")
setwd("~/MetaZipf/")
deployApp(account = "clementinegeo")
setwd("~/Documents/MetaZipf")
deployApp(account = "clementinegeo")
setAccountInfo
rsconnect::setAccountInfo
shinyapps::setAccountInfo(name='clementinegeo',
token='1AF7DB6873D93AD72619746B725F7E0E',
secret='<SECRET>')
shinyapps::setAccountInfo(name='clementinegeo',
token='1AF7DB6873D93AD72619746B725F7E0E',
secret='<SECRET>')
shinyapps::setAccountInfo(name='clementinegeo',
token='1AF7DB6873D93AD72619746B725F7E0E',
secret='tmuEuH90IjVLa+kNCQn/GzKyepyuRLSWm00QZaOI')
library(shinyapps)
shinyapps::setAccountInfo(name='clementinegeo',token='DE92535E814EEF3CA2208436853F01C5',secret='tmuEuH90IjVLa+kNCQn/GzKyepyuRLSWm00QZaOI')
deployApp(account = "clementinegeo")
library(RODBC)
install.packages("RODBC")
library(RODBC)
install.packages("RODBC")
library(RODBC)
library(RODBC)
shiny::runApp()
runGitHub( "MetaZipf", "ClementineCttn”)
)
))
